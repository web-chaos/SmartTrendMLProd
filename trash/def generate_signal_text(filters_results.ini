def generate_signal_text(filters_results: dict, ml_output: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–∏–≥–Ω–∞–ª—É —Å —É—á–µ—Ç–æ–º ML –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 5 TP (—Ç–µ–π–∫–æ–≤).
    """
    # --- 1. –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
    entry_low = filters_results.get("entry_low", 0)
    entry_high = filters_results.get("entry_high", 0)
    stop = filters_results.get("stop", 0)
    tps = filters_results.get("tps", [])  # —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π TP1‚ÄìTP5, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5
    global_trend = filters_results.get("global_trend", "neutral")

    # --- 2. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞ ---
    final_score = filters_results.get("final_score", 0)
    ml_conf = ml_output.get("ml_result", {}).get("ml_confidence", 0)
    strength = round((0.6 * final_score + 0.4 * ml_conf) * 100, 2)

    # --- 3. –°–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–ª—ã ---
    if strength < 40:
        desc, emoji = "—Å–ª–∞–±—ã–π / —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üî¥"
    elif strength < 60:
        desc, emoji = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π / —Ç—Ä–µ–±—É—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "üü†"
    elif strength < 80:
        desc, emoji = "—Å—Ä–µ–¥–Ω–µ-—Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π / –º–µ–¥–≤–µ–∂–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üü¢"
    else:
        desc, emoji = "–º–æ—â–Ω—ã–π –∏–º–ø—É–ª—å—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üü£"

    # --- 4. –ü—Ä–æ–≥–Ω–æ–∑ –¥–≤–∏–∂–µ–Ω–∏—è ---
    ml_class = ml_output.get("ml_result", {}).get("ml_predicted_class", 0)
    if ml_class == 0:
        forecast_text = f"STOP ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
    else:
        # TP –¥–æ 5 —Ü–µ–ª–µ–π
        tps_text = " ‚Üí ".join([f"{tp:.4f}" for tp in tps[:5]])
        forecast_text = (
            f"–í –±–ª–∏–∂–∞–π—à–∏–µ 2‚Äì4 —á–∞—Å–∞ –≤–µ—Ä–æ—è—Ç–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–∫–∞—Ç –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ "
            f"{entry_low:.4f}-{entry_high:.4f}, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª—è–º TP1‚ÄìTP{ml_class} ({tps_text})."
        )

    # --- 5. –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ---
    action = ml_output.get("ml_action", "neutral")
    ml_reason = ml_output.get("ml_reason", "")
    if action == "approve":
        rec = f"–í—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî {ml_reason}"
    elif action == "reject":
        rec = f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚Äî {ml_reason}"
    else:
        rec = f"–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî {ml_reason}"

    # --- 6. –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π ---
    short_summary = f"üîÆ –°–∏–ª–∞ {strength}% ‚Äî –∂–¥—ë–º —Ä–µ—Ç–µ—Å—Ç {entry_low:.4f}, –ø–æ—Ç–æ–º —Ä–æ—Å—Ç –∫ TP{ml_class} ({tps_text.split(' ‚Üí ')[-1]})"

    # --- 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ---
    message = (
        f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–∏–ª–∞\n"
        f"{emoji} {strength}% ({desc})\n\n"
        f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑\n"
        f"{forecast_text}\n\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\n"
        f"{rec}\n\n"
        f"{short_summary}"
    )

    return message










# -------------------------------------------- ver 2

def generate_signal_text(filters_results: dict, ml_output: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–∏–≥–Ω–∞–ª—É —Å —É—á–µ—Ç–æ–º ML –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 5 TP (—Ç–µ–π–∫–æ–≤).
    """
    # --- 1. –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
    entry_low = filters_results.get("entry_low", 0)
    entry_high = filters_results.get("entry_high", 0)
    stop = filters_results.get("stop", 0)
    tps = filters_results.get("tps", [])  # —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π TP1‚ÄìTP5, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5
    global_trend = filters_results.get("global_trend", "neutral")

    # --- 2. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞ ---
    final_score = filters_results.get("final_score", 0)
    ml_conf = ml_output.get("ml_result", {}).get("ml_confidence", 0)
    strength = round((0.6 * final_score + 0.4 * ml_conf) * 100, 2)

    # --- 3. –°–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–ª—ã ---
    if strength < 40:
        desc, emoji = "—Å–ª–∞–±—ã–π / —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üî¥"
    elif strength < 60:
        desc, emoji = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π / —Ç—Ä–µ–±—É—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "üü†"
    elif strength < 80:
        desc, emoji = "—Å—Ä–µ–¥–Ω–µ-—Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π / –º–µ–¥–≤–µ–∂–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üü¢"
    else:
        desc, emoji = "–º–æ—â–Ω—ã–π –∏–º–ø—É–ª—å—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üü£"

    # --- 4. –ü—Ä–æ–≥–Ω–æ–∑ –¥–≤–∏–∂–µ–Ω–∏—è ---
    ml_class = ml_output.get("ml_result", {}).get("ml_predicted_class", 0)
    ml_label = ml_output.get("ml_result", {}).get("ml_predicted_label", "STOP")
    
    if ml_class == 0:
        forecast_text = f"STOP ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
    else:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ tps_text
        tps_display = tps[:ml_class]  # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π
        if tps_display:
            tps_text = " ‚Üí ".join([f"{tp:.4f}" for tp in tps_display])
            forecast_text = (
                f"–í –±–ª–∏–∂–∞–π—à–∏–µ 2‚Äì4 —á–∞—Å–∞ –≤–µ—Ä–æ—è—Ç–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–∫–∞—Ç –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ "
                f"{entry_low:.4f}-{entry_high:.4f}, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª—è–º TP1‚ÄìTP{ml_class} ({tps_text})."
            )
        else:
            forecast_text = "–¶–µ–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"

    # --- 5. –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ---
    action = ml_output.get("ml_action", "neutral")
    ml_reason = ml_output.get("ml_reason", "")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥—ã –ø—Ä–∏—á–∏–Ω –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    reason_map = {
        "ML_OFF": "ML –≤—ã–∫–ª—é—á–µ–Ω–∞",
        "NO_CONFIDENT_PREDICTION": "–Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞",
        "ADVISORY_NEUTRAL": "—Ä–µ–∂–∏–º —Å–æ–≤–µ—Ç–Ω–∏–∫–∞",
        "HYBRID_OVERRIDE_APPROVE": "ML –ø–µ—Ä–µ—É–±–µ–¥–∏–ª–∞ –±–æ—Ç–∞",
        "HYBRID_OVERRIDE_REJECT": "ML –ø–µ—Ä–µ—É–±–µ–¥–∏–ª–∞ –±–æ—Ç–∞", 
        "HYBRID_NO_OVERRIDE": "ML –Ω–µ –≤–º–µ—à–∞–ª–∞—Å—å",
        "AUTONOMOUS_REJECT_STOP": "–∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "AUTONOMOUS_APPROVE_TP2P": "–∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "AUTONOMOUS_NEUTRAL_TP1": "–∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "AUTONOMOUS_LOW_CONFIDENCE": "–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        "UNKNOWN_MODE": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º"
    }
    
    readable_reason = reason_map.get(ml_reason, ml_reason)
    
    if action == "approve":
        rec = f"–í—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî {readable_reason}"
    elif action == "reject":
        rec = f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚Äî {readable_reason}"
    else:
        rec = f"–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî {readable_reason}"

    # --- 6. –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π ---
    if ml_class > 0 and tps:
        last_tp = f"{tps[min(ml_class-1, len(tps)-1)]:.4f}"
        short_summary = f"üîÆ –°–∏–ª–∞ {strength}% ‚Äî –∂–¥—ë–º —Ä–µ—Ç–µ—Å—Ç {entry_low:.4f}, –ø–æ—Ç–æ–º —Ä–æ—Å—Ç –∫ TP{ml_class} ({last_tp})"
    else:
        short_summary = f"üîÆ –°–∏–ª–∞ {strength}% ‚Äî {desc}"

    # --- 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ---
    message = (
        f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–∏–ª–∞\n"
        f"{emoji} {strength}% ({desc})\n\n"
        f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑\n"
        f"{forecast_text}\n\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\n"
        f"{rec}\n\n"
        f"{short_summary}"
    )

    return message