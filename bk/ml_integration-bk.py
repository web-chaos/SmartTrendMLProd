# ml_integration.py (–≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å)
from typing import Dict, Tuple, Optional
import numpy as np
import pandas as pd
import joblib, json, os

# –∫–æ–Ω—Ñ–∏–≥ (–∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–π –∏–∑ main/config)
ML_CONFIG = {
    "enabled": True,
    "mode": "advisory",  # off | advisory | hybrid | autonomous
    "model_path": "models/lgbm_v1.pkl",
    "features_path": "models/feature_order.json",
    "confidence_threshold": 0.6,  # –ø–æ—Ä–æ–≥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    "hybrid_override_threshold": 0.7,  # –ø–æ—Ä–æ–≥ –¥–ª—è –ø–µ—Ä–µ—É–±–µ–¥–∏—Ç—å –±–æ—Ç–∞
}

ml_model = None
ml_features = []
def init_model():
    global ml_model, ml_features
    if not ML_CONFIG.get("enabled", False) or ML_CONFIG["mode"] == "off":
        ml_model = None
        return False
    try:
        ml_model = joblib.load(ML_CONFIG["model_path"])
        with open(ML_CONFIG["features_path"], "r", encoding="utf-8") as f:
            ml_features = json.load(f)
        print("[ML] loaded", ML_CONFIG["model_path"])
        return True
    except Exception as e:
        print("[ML] load error:", e)
        ml_model = None
        return False

def analyze_signal_row(filters_results: Dict) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å ml_result –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
    if ml_model is None:
        return None
    try:
        print(f"[ML DEBUG] –ü–æ–ª—É—á–µ–Ω–æ {len(filters_results)} –ø–æ–ª–µ–π –≤ filters_results")

        row = {f: filters_results.get(f, 0) for f in ml_features}
        X = pd.DataFrame([row]).fillna(0).astype(float)
        probs = ml_model.predict_proba(X)[0]
        pred_class = int(np.argmax(probs))
        conf = float(np.max(probs))
        return {
            "ml_predicted_class": pred_class,
            "ml_confidence": conf,
            "ml_probas": probs.tolist()
        }
    except Exception as e:
        print("[ML] analyze error:", e)
        return None

def ml_handle_signal(filters_results: Dict, passed_by_bot: bool) -> Dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {
        "ml_result": {...}   # –ø–æ–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        "ml_action": "approve"|"reject"|"neutral"  # –¥–µ–π—Å—Ç–≤–∏–µ ML –ø–æ —Å–∏–≥–Ω–∞–ª—É
        "ml_reason": str
      }
    –ù–µ –º–µ–Ω—è–µ—Ç –Ω–∏—á–µ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ ‚Äî —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.
    """

    print(f"[ML] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: passed_by_bot={passed_by_bot}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º out —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π ml_result
    out = {
        "ml_result": {
            "ml_mode": ML_CONFIG["mode"],
            "ml_decision": "neutral", 
            "ml_comment": "",
            "ml_predicted_class": 0,
            "ml_predicted_label": "",
            "ml_confidence": 0.0,
            "ml_strength": 0.0,
            "ml_probas": "[]"
        },
        "ml_action": "neutral", 
        "ml_reason": ""
    }

    # –±—ã—Å—Ç—Ä—ã–π fail-safe
    if not ML_CONFIG.get("enabled", False) or ML_CONFIG["mode"] == "off" or ml_model is None:
        out["ml_reason"] = "ML_OFF"
        # –û–±–Ω–æ–≤–ª—è–µ–º ml_result –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º
        out["ml_result"]["ml_decision"] = out["ml_action"]
        out["ml_result"]["ml_comment"] = out["ml_reason"]
        return out
    
    print(f"[ML] Mode: {ML_CONFIG['mode']}, Model loaded: {ml_model is not None}, Bot decision: {'approved' if passed_by_bot else 'rejected'}")

    ml = analyze_signal_row(filters_results)

    if ml:
        print(f"[ML] Prediction: class={ml['ml_predicted_class']}, confidence={ml['ml_confidence']:.3f}")
    else:
        print("[ML] No prediction available")

    if not ml:
        out["ml_reason"] = "NO_CONFIDENT_PREDICTION"
        # –û–±–Ω–æ–≤–ª—è–µ–º ml_result –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º
        out["ml_result"]["ml_decision"] = out["ml_action"]
        out["ml_result"]["ml_comment"] = out["ml_reason"]
        return out

    # –ø–æ–ª–æ–∂–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ë–î
    ml_label = f"TP{ml['ml_predicted_class']}" if ml["ml_predicted_class"] > 0 else "STOP"
    ml_strength = round(ml["ml_confidence"] * 100, 2)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ml_result —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –º–æ–¥–µ–ª–∏
    out["ml_result"].update({
        "ml_predicted_class": int(ml["ml_predicted_class"]),
        "ml_predicted_label": ml_label,
        "ml_confidence": float(ml["ml_confidence"]),
        "ml_strength": ml_strength,
        "ml_probas": json.dumps(ml["ml_probas"])
    })

    mode = ML_CONFIG["mode"]
    # decision logic
    if mode == "advisory":
        out["ml_action"] = "neutral"
        out["ml_reason"] = "ADVISORY_NEUTRAL"
        # –û–±–Ω–æ–≤–ª—è–µ–º ml_result –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º
        out["ml_result"]["ml_decision"] = out["ml_action"]
        out["ml_result"]["ml_comment"] = out["ml_reason"]
        return out

    if mode == "hybrid":
        # –µ—Å–ª–∏ –±–æ—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–∏–≥–Ω–∞–ª, –Ω–æ ML –æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç TP2+
        if not passed_by_bot and ml["ml_confidence"] >= ML_CONFIG["hybrid_override_threshold"] and ml["ml_predicted_class"] >= 2:
            out["ml_action"] = "approve"
            out["ml_reason"] = "HYBRID_OVERRIDE_APPROVE"
        # –µ—Å–ª–∏ –±–æ—Ç —Ä–∞–∑—Ä–µ—à–∏–ª, –Ω–æ ML —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Å—Ç–æ–ø ‚Äî ML –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
        elif passed_by_bot and ml["ml_confidence"] >= ML_CONFIG["hybrid_override_threshold"] and ml["ml_predicted_class"] == 0:
            out["ml_action"] = "reject"
            out["ml_reason"] = "HYBRID_OVERRIDE_REJECT"
        else:
            out["ml_action"] = "neutral"
            out["ml_reason"] = "HYBRID_NO_OVERRIDE"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ml_result –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º
        out["ml_result"]["ml_decision"] = out["ml_action"]
        out["ml_result"]["ml_comment"] = out["ml_reason"]
        return out

    if mode == "autonomous":
        # –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ >= threshold
        if ml["ml_confidence"] >= ML_CONFIG["confidence_threshold"]:
            if ml["ml_predicted_class"] == 0:
                out["ml_action"] = "reject"
                out["ml_reason"] = "AUTONOMOUS_REJECT_STOP"
            elif ml["ml_predicted_class"] >= 2:
                out["ml_action"] = "approve"
                out["ml_reason"] = "AUTONOMOUS_APPROVE_TP2P"
            else:
                out["ml_action"] = "neutral"
                out["ml_reason"] = "AUTONOMOUS_NEUTRAL_TP1"
        else:
            out["ml_action"] = "neutral"
            out["ml_reason"] = "AUTONOMOUS_LOW_CONFIDENCE"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ml_result –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º
        out["ml_result"]["ml_decision"] = out["ml_action"]
        out["ml_result"]["ml_comment"] = out["ml_reason"]
        return out

    out["ml_reason"] = "UNKNOWN_MODE"
    # –û–±–Ω–æ–≤–ª—è–µ–º ml_result –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º
    out["ml_result"]["ml_decision"] = out["ml_action"]
    out["ml_result"]["ml_comment"] = out["ml_reason"]
    return out

def generate_signal_text_base(filters_results: dict, ml_output: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–∏–≥–Ω–∞–ª—É —Å —É—á–µ—Ç–æ–º ML –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 5 TP (—Ç–µ–π–∫–æ–≤).
    """
    # --- 1. –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
    entry_low = filters_results.get("entry_low", 0)
    entry_high = filters_results.get("entry_high", 0)
    stop = filters_results.get("stop", 0)
    tps = filters_results.get("tps", [])  # —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π TP1‚ÄìTP5, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5
    global_trend = filters_results.get("global_trend", "neutral")

    # --- 2. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞ ---
    final_score = filters_results.get("final_score", 0)
    ml_conf = ml_output.get("ml_result", {}).get("ml_confidence", 0)
    strength = round((0.6 * final_score + 0.4 * ml_conf) * 100, 2)

    # --- 3. –°–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–ª—ã ---
    if strength < 40:
        desc, emoji = "—Å–ª–∞–±—ã–π / —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üî¥"
    elif strength < 60:
        desc, emoji = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π / —Ç—Ä–µ–±—É—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "üü†"
    elif strength < 80:
        desc, emoji = "—Å—Ä–µ–¥–Ω–µ-—Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π / –º–µ–¥–≤–µ–∂–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üü¢"
    else:
        desc, emoji = "–º–æ—â–Ω—ã–π –∏–º–ø—É–ª—å—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üü£"

    # --- 4. –ü—Ä–æ–≥–Ω–æ–∑ –¥–≤–∏–∂–µ–Ω–∏—è ---
    ml_class = ml_output.get("ml_result", {}).get("ml_predicted_class", 0)
    ml_label = ml_output.get("ml_result", {}).get("ml_predicted_label", "STOP")
    
    if ml_class == 0:
        forecast_text = f"STOP ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
    else:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ tps_text
        tps_display = tps[:ml_class]  # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π
        if tps_display:
            tps_text = " ‚Üí ".join([f"{tp:.4f}" for tp in tps_display])
            forecast_text = (
                f"–í –±–ª–∏–∂–∞–π—à–∏–µ 2‚Äì4 —á–∞—Å–∞ –≤–µ—Ä–æ—è—Ç–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–∫–∞—Ç –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ "
                f"{entry_low:.4f}-{entry_high:.4f}, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª—è–º TP1‚ÄìTP{ml_class} ({tps_text})."
            )
        else:
            forecast_text = "–¶–µ–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"

    # --- 5. –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ---
    action = ml_output.get("ml_action", "neutral")
    ml_reason = ml_output.get("ml_reason", "")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥—ã –ø—Ä–∏—á–∏–Ω –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    reason_map = {
        "ML_OFF": "ML –≤—ã–∫–ª—é—á–µ–Ω–∞",
        "NO_CONFIDENT_PREDICTION": "–Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞",
        "ADVISORY_NEUTRAL": "—Ä–µ–∂–∏–º —Å–æ–≤–µ—Ç–Ω–∏–∫–∞",
        "HYBRID_OVERRIDE_APPROVE": "ML –ø–µ—Ä–µ—É–±–µ–¥–∏–ª–∞ –±–æ—Ç–∞",
        "HYBRID_OVERRIDE_REJECT": "ML –ø–µ—Ä–µ—É–±–µ–¥–∏–ª–∞ –±–æ—Ç–∞", 
        "HYBRID_NO_OVERRIDE": "ML –Ω–µ –≤–º–µ—à–∞–ª–∞—Å—å",
        "AUTONOMOUS_REJECT_STOP": "–∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "AUTONOMOUS_APPROVE_TP2P": "–∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "AUTONOMOUS_NEUTRAL_TP1": "–∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "AUTONOMOUS_LOW_CONFIDENCE": "–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        "UNKNOWN_MODE": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º"
    }
    
    readable_reason = reason_map.get(ml_reason, ml_reason)
    
    if action == "approve":
        rec = f"–í—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî {readable_reason}"
    elif action == "reject":
        rec = f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚Äî {readable_reason}"
    else:
        rec = f"–ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî {readable_reason}"

    # --- 6. –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π ---
    if ml_class > 0 and tps:
        last_tp = f"{tps[min(ml_class-1, len(tps)-1)]:.4f}"
        short_summary = f"üîÆ –°–∏–ª–∞ {strength}% ‚Äî –∂–¥—ë–º —Ä–µ—Ç–µ—Å—Ç {entry_low:.4f}, –ø–æ—Ç–æ–º —Ä–æ—Å—Ç –∫ TP{ml_class} ({last_tp})"
    else:
        short_summary = f"üîÆ –°–∏–ª–∞ {strength}% ‚Äî {desc}"

    # --- 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ---
    message = (
        f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–∏–ª–∞\n"
        f"{emoji} {strength}% ({desc})\n\n"
        f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑\n"
        f"{forecast_text}\n\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è\n"
        f"{rec}\n\n"
        f"{short_summary}"
    )

    return message


def generate_signal_text(filters_results: dict, ml_output: dict, targets: tuple, stop: float) -> str:
    # --- 1. –í—Ö–æ–¥ –∏ —Å–∏–ª–∞ ---
    entry_low = filters_results.get("entry_low", 0)
    entry_high = filters_results.get("entry_high", 0)
    final_score = filters_results.get("final_score", 0)
    ml_conf = ml_output.get("ml_result", {}).get("ml_confidence", 0)
    strength = round((0.6 * final_score + 0.4 * ml_conf) * 100, 2)

    # —Å–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–ª—ã
    signal_type = filters_results.get("trend_global", "long")  # long / short

    if strength < 40:
        desc, emoji = "—Å–ª–∞–±—ã–π / —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "üî¥"
    elif strength < 60:
        desc, emoji = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π / —Ç—Ä–µ–±—É—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "üü†"
    elif strength < 80:
        desc = "—Å—Ä–µ–¥–Ω–µ-—Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π" if signal_type=="long" else "—Å—Ä–µ–¥–Ω–µ-—Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π"
        emoji = "üü¢"
    else:
        desc = "–º–æ—â–Ω—ã–π –∏–º–ø—É–ª—å—Å–Ω—ã–π –±—ã—á–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π" if signal_type=="long" else "–º–æ—â–Ω—ã–π –∏–º–ø—É–ª—å—Å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π"
        emoji = "üü£"

    # --- 2. –¢–µ–π–∫–∏ ---
    # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∏–∑ targets
    tps = [t[0] for t in targets]
    ml_class = ml_output.get("ml_result", {}).get("ml_predicted_class", 0)
    
    if ml_class == 0:
        tps_text = "STOP ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
    else:
        tps_display = tps[:ml_class]
        if tps_display:
            tps_text = f"{tps_display[0]:.4f}"
            if len(tps_display) > 1:
                tps_text += f" ‚Üí {tps_display[-1]:.4f}"
        else:
            tps_text = "–¶–µ–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"

    # --- 3. ML –ø—Ä–æ–≥–Ω–æ–∑ ---
    ml_action = ml_output.get("ml_action", "neutral")
    ml_conf_pct = round(ml_conf * 100, 1)
    if ml_action == "approve":
        ml_text = f"–≤—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {ml_conf_pct}%)"
    elif ml_action == "reject":
        ml_text = f"—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {ml_conf_pct}%)"
    else:
        ml_text = f"–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –Ω–µ –¥–∞—ë—Ç –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {ml_conf_pct}%)"

    # --- 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ---
    if ml_class == 0 or ml_action == "reject":
        rec = "—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω"
    elif ml_action == "approve":
        rec = "–≤—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–æ—Å—Ç–∞"
    else:
        rec = "–ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ"

    # --- 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ---
    message = (
        f"üîÆ –°–∏–ª–∞: {strength}% ({desc})\n"
        f"üìà –í—Ö–æ–¥: {entry_low:.4f}‚Äì{entry_high:.4f}\n"
        f"üéØ –¶–µ–ª–∏: {tps_text}\n"
        f"üõë –°—Ç–æ–ø: {stop:.4f}\n"
        f"üí° ML: {ml_text}\n"
        f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec}"
    )

    return message


# HYBRID —Ä–µ–∂–∏–º:
# HYBRID_OVERRIDE_APPROVE    - ML –ø–µ—Ä–µ—É–±–µ–¥–∏–ª–∞ –Ω–∞ approve
# HYBRID_OVERRIDE_REJECT     - ML –ø–µ—Ä–µ—É–±–µ–¥–∏–ª–∞ –Ω–∞ reject  
# HYBRID_NO_OVERRIDE         - ML –Ω–µ –≤–º–µ—à–∞–ª–∞—Å—å

# AUTONOMOUS —Ä–µ–∂–∏–º:
# AUTONOMOUS_APPROVE_TP2P    - –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ TP2+
# AUTONOMOUS_REJECT_STOP     - –∞–≤—Ç–æ–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ STOP
# AUTONOMOUS_NEUTRAL_TP1     - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏–∑-–∑–∞ TP1
# AUTONOMOUS_LOW_CONFIDENCE  - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

# –û–ë–©–ò–ï:
# ML_OFF                     - ML –≤—ã–∫–ª—é—á–µ–Ω–∞
# NO_CONFIDENT_PREDICTION    - –Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
# UNKNOWN_MODE               - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º