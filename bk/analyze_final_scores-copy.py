#!/usr/bin/env python3
import os
import sqlite3
import pandas as pd
import numpy as np
import lightgbm as lgb
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.metrics import classification_report, roc_auc_score, precision_recall_curve, roc_curve
import matplotlib.pyplot as plt
import seaborn as sns
import json
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DEFAULT_DB = "ml_trading.db"
DEFAULT_TABLE = "ml_trading_data"
DEFAULT_OUT_MODEL = "models/"
MODEL_FILE = os.path.join(DEFAULT_OUT_MODEL, "final_scores_lgbm.txt")
REPORT_FILE = os.path.join(DEFAULT_OUT_MODEL, "final_scores_report.json")
PLOT_FILE = os.path.join(DEFAULT_OUT_MODEL, "final_scores_success_rate.png")
HIST_FILE = os.path.join(DEFAULT_OUT_MODEL, "final_scores_histogram.png")
ROC_FILE = os.path.join(DEFAULT_OUT_MODEL, "roc_curve.png")
PROB_DIST_FILE = os.path.join(DEFAULT_OUT_MODEL, "probability_distribution.png")

os.makedirs(DEFAULT_OUT_MODEL, exist_ok=True)

class TradingModelAnalyzer:
    def __init__(self, db_path, table_name):
        self.db_path = db_path
        self.table_name = table_name
        self.df = None
        self.model = None
        self.report = {}
        
    def load_and_prepare_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏"""
        conn = sqlite3.connect(self.db_path)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        query = f"""
        SELECT
            final_scores,
            scores_config,
            target,
            take1_profit, take2_profit, take3_profit, take4_profit, take5_profit,
            signal_passed
        FROM {self.table_name}
        WHERE signal_passed = 1 AND final_scores IS NOT NULL
        """
        
        self.df = pd.read_sql_query(query, conn)
        conn.close()
        
        if self.df.empty:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ signal_passed = 1 –∏ final_scores")
            
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏—á
        self._create_advanced_features()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        self._define_success_criteria()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
    def _create_advanced_features(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.df["score_diff"] = self.df["final_scores"] - self.df["scores_config"]
        self.df["score_ratio"] = self.df["final_scores"] / (self.df["scores_config"] + 1e-8)
        self.df["score_abs_diff"] = np.abs(self.df["score_diff"])
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ñ–∏—Ç–∞
        profit_columns = [f"take{i}_profit" for i in range(1, 6)]
        self.df["max_profit"] = self.df[profit_columns].max(axis=1)
        self.df["min_profit"] = self.df[profit_columns].min(axis=1)
        self.df["avg_profit"] = self.df[profit_columns].mean(axis=1)
        self.df["profit_std"] = self.df[profit_columns].std(axis=1)
        
        # –ë–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        self.df["high_score_ratio"] = (self.df["score_ratio"] > 1.5).astype(int)
        self.df["positive_score_diff"] = (self.df["score_diff"] > 0).astype(int)
        
    def _define_success_criteria(self):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫"""
        def calculate_success(row):
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: —Ü–µ–ª–µ–≤–æ–π —Å–∏–≥–Ω–∞–ª
            if row["target"] == 1:
                return 1
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –ª—é–±–æ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç > 0
            takes = [row[f"take{i}_profit"] for i in range(1, 6)]
            if any(take > 0 for take in takes):
                return 1
                
            return 0
        
        self.df["success"] = self.df.apply(calculate_success, axis=1)
        
        success_rate = self.df["success"].mean()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {self.df['success'].sum()} ({success_rate:.1%})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if success_rate == 1.0:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω—ã–µ! –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏.")
        elif success_rate == 0.0:
            raise ValueError("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        elif success_rate > 0.8 or success_rate < 0.2:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –º–æ–¥–µ–ª—å")
    
    def analyze_basic_statistics(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        success_df = self.df[self.df["success"] == 1]
        fail_df = self.df[self.df["success"] == 0]
        
        stats = {
            "success_count": len(success_df),
            "fail_count": len(fail_df),
            "success_rate": self.df["success"].mean(),
            "final_scores_overall": {
                "min": float(self.df["final_scores"].min()),
                "max": float(self.df["final_scores"].max()),
                "mean": float(self.df["final_scores"].mean()),
                "std": float(self.df["final_scores"].std())
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if len(success_df) > 0:
            stats["final_scores_success"] = {
                "min": float(success_df["final_scores"].min()),
                "max": float(success_df["final_scores"].max()),
                "mean": float(success_df["final_scores"].mean()),
                "std": float(success_df["final_scores"].std())
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if len(fail_df) > 0:
            stats["final_scores_fail"] = {
                "min": float(fail_df["final_scores"].min()),
                "max": float(fail_df["final_scores"].max()),
                "mean": float(fail_df["final_scores"].mean()),
                "std": float(fail_df["final_scores"].std())
            }
        
        print("\nüìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(self.df)}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['success_count']} ({stats['success_rate']:.1%})")
        print(f"   –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {stats['fail_count']}")
        print(f"   Final_scores –æ–±—â–∏–µ: {stats['final_scores_overall']['mean']:.2f} ¬± {stats['final_scores_overall']['std']:.2f}")
        
        if 'final_scores_success' in stats:
            print(f"   Final_scores —É—Å–ø–µ—à–Ω—ã—Ö: {stats['final_scores_success']['mean']:.2f} ¬± {stats['final_scores_success']['std']:.2f}")
        if 'final_scores_fail' in stats:
            print(f"   Final_scores –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö: {stats['final_scores_fail']['mean']:.2f} ¬± {stats['final_scores_fail']['std']:.2f}")
        
        self.report["basic_statistics"] = stats
        return stats
    
    def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_columns = ["final_scores", "scores_config", "score_diff", "score_ratio", 
                          "max_profit", "avg_profit", "high_score_ratio", "positive_score_diff"]
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        available_features = [col for col in feature_columns if col in self.df.columns]
        X = self.df[available_features]
        y = self.df["success"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–∞ –∫–ª–∞—Å—Å–∞
        if len(np.unique(y)) < 2:
            print("‚ö†Ô∏è  –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª–∞—Å—Å –≤ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑.")
            return self._handle_single_class_case(X, y)
        
        # –°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ LightGBM
        self.model = lgb.LGBMClassifier(
            objective="binary",
            n_estimators=100,  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            learning_rate=0.05,
            max_depth=3,  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            num_leaves=10,
            random_state=42,
            verbosity=-1
        )
        
        print(f"\nüéØ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò:")
        print(f"   –ü—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(available_features)}")
        print(f"   Train samples: {len(X_train)}, Test samples: {len(X_test)}")
        
        try:
            # –û–±—É—á–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π LightGBM
            self.model.fit(X_train, y_train)
            
            # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
            cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            cv_scores = cross_val_score(self.model, X, y, cv=cv, scoring='roc_auc')
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            y_pred_proba = self.model.predict_proba(X_test)[:, 1]
            y_pred = (y_pred_proba > 0.5).astype(int)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            roc_auc = roc_auc_score(y_test, y_pred_proba)
            classification_rep = classification_report(y_test, y_pred, output_dict=True)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            self.model.booster_.save_model(MODEL_FILE)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä–æ–≥–æ–≤
            optimal_threshold = self._analyze_thresholds(X_test, y_test, y_pred_proba)
            
            model_metrics = {
                "cv_roc_auc_mean": float(cv_scores.mean()),
                "cv_roc_auc_std": float(cv_scores.std()),
                "test_roc_auc": float(roc_auc),
                "optimal_threshold": float(optimal_threshold),
                "feature_importance": dict(zip(available_features, [float(x) for x in self.model.feature_importances_])),
                "classification_report": classification_rep
            }
            
            print(f"   CV ROC-AUC: {cv_scores.mean():.3f} ¬± {cv_scores.std():.3f}")
            print(f"   Test ROC-AUC: {roc_auc:.3f}")
            print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {optimal_threshold:.3f}")
            
            self.report["model_metrics"] = model_metrics
            self.X_test = X_test
            self.y_test = y_test
            self.y_pred_proba = y_pred_proba
            
            return model_metrics
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
            return self._handle_single_class_case(X, y)
    
    def _handle_single_class_case(self, X, y):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è —Å –æ–¥–Ω–∏–º –∫–ª–∞—Å—Å–æ–º"""
        success_rate = y.mean()
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π
        if success_rate == 1.0:
            # –í—Å–µ —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω—ã–µ - –±–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π final_scores
            threshold = X["final_scores"].min()
            recommendation = "–í—Å–µ —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ final_scores –∫–∞–∫ –ø–æ—Ä–æ–≥."
        else:
            # –í—Å–µ —Å–¥–µ–ª–∫–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ - –±–µ—Ä–µ–º –º–µ–¥–∏–∞–Ω—É
            threshold = X["final_scores"].median()
            recommendation = "–í—Å–µ —Å–¥–µ–ª–∫–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é."
        
        model_metrics = {
            "cv_roc_auc_mean": 1.0 if success_rate == 1.0 else 0.0,
            "cv_roc_auc_std": 0.0,
            "test_roc_auc": 1.0 if success_rate == 1.0 else 0.0,
            "optimal_threshold": float(threshold),
            "feature_importance": {"final_scores": 1.0},
            "classification_report": {"accuracy": success_rate},
            "special_case": True,
            "recommendation": recommendation
        }
        
        print(f"   üìç –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: {recommendation}")
        print(f"   üìä –ü–æ—Ä–æ–≥: {threshold:.3f}")
        
        self.report["model_metrics"] = model_metrics
        return model_metrics
    
    def _analyze_thresholds(self, X_test, y_test, y_pred_proba):
        """–ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤"""
        try:
            precision, recall, thresholds = precision_recall_curve(y_test, y_pred_proba)
            
            # F1-score –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ–≥–∞
            f1_scores = 2 * (precision * recall) / (precision + recall + 1e-8)
            optimal_idx = np.argmax(f1_scores[:-1])  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            optimal_threshold_prob = thresholds[optimal_idx]
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ final_scores
            results = X_test.copy()
            results["prob_success"] = y_pred_proba
            recommended_threshold = results.loc[results["prob_success"] > optimal_threshold_prob, "final_scores"]
            
            if not recommended_threshold.empty:
                final_threshold = recommended_threshold.min()
            else:
                final_threshold = results["final_scores"].median()
                
            return final_threshold
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä–æ–≥–æ–≤: {e}")
            return X_test["final_scores"].median()
    
    def create_visualizations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
        plt.style.use('default')
        
        try:
            # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            self._create_histogram()
            
            # 2. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –±–∞–∫–µ—Ç–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –∫–ª–∞—Å—Å–∞)
            if len(np.unique(self.df["success"])) > 1:
                self._create_success_rate_plot()
            else:
                self._create_single_class_plot()
            
            # 3. ROC-–∫—Ä–∏–≤–∞—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –∫–ª–∞—Å—Å–∞)
            if hasattr(self, 'y_test') and len(np.unique(self.y_test)) > 1:
                self._create_roc_curve()
            
            # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ final_scores
            self._create_final_scores_distribution()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
    
    def _create_histogram(self):
        """–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è final_scores"""
        plt.figure(figsize=(12, 8))
        
        if len(np.unique(self.df["success"])) > 1:
            success_data = self.df[self.df['success'] == 1]['final_scores']
            fail_data = self.df[self.df['success'] == 0]['final_scores']
            
            plt.hist(fail_data, bins=20, alpha=0.6, label='–ù–µ—É—Å–ø–µ—à–Ω—ã–µ', color='red', density=True)
            plt.hist(success_data, bins=20, alpha=0.7, label='–£—Å–ø–µ—à–Ω—ã–µ', color='green', density=True)
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª–∞—Å—Å
            plt.hist(self.df['final_scores'], bins=20, alpha=0.7, color='blue', density=True)
            success_rate = self.df["success"].mean()
            label = '–í—Å–µ —É—Å–ø–µ—à–Ω—ã–µ' if success_rate == 1.0 else '–í—Å–µ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ'
            plt.text(0.7, 0.9, label, transform=plt.gca().transAxes, fontsize=12)
        
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ final_scores", fontsize=14, fontweight='bold')
        plt.xlabel("final_scores", fontsize=12)
        plt.ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å", fontsize=12)
        plt.legend(fontsize=11)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(HIST_FILE, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {HIST_FILE}")
    
    def _create_success_rate_plot(self):
        """–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º final_scores"""
        self.df['bucket'] = pd.cut(self.df['final_scores'], bins=10)  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–Ω–æ–≤
        success_rate = self.df.groupby('bucket')['success'].agg(['mean', 'count']).fillna(0)
        
        plt.figure(figsize=(12, 8))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        bars = plt.barh(range(len(success_rate)), success_rate['mean'][::-1])
        
        # –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        for i, (idx, row) in enumerate(success_rate[::-1].iterrows()):
            color = 'green' if row['mean'] > 0.5 else 'red'
            bars[i].set_color(color)
            plt.text(row['mean'] + 0.01, i, f"n={int(row['count'])}", 
                    va='center', fontsize=9)
        
        plt.yticks(range(len(success_rate)), [str(x) for x in success_rate.index[::-1]])
        plt.axvline(x=0.5, color='blue', linestyle='--', linewidth=2, label="–ü–æ—Ä–æ–≥ 50%")
        plt.title("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º final_scores", fontsize=14, fontweight='bold')
        plt.xlabel("–î–æ–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", fontsize=12)
        plt.ylabel("–î–∏–∞–ø–∞–∑–æ–Ω final_scores", fontsize=12)
        plt.legend(fontsize=11)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(PLOT_FILE, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"üìà –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {PLOT_FILE}")
    
    def _create_single_class_plot(self):
        """–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è —Å –æ–¥–Ω–∏–º –∫–ª–∞—Å—Å–æ–º"""
        plt.figure(figsize=(12, 8))
        
        success_rate = self.df["success"].mean()
        if success_rate == 1.0:
            color = 'green'
            title = "–í—Å–µ —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω—ã–µ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ final_scores"
        else:
            color = 'red'
            title = "–í—Å–µ —Å–¥–µ–ª–∫–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ final_scores"
        
        plt.hist(self.df['final_scores'], bins=20, alpha=0.7, color=color, density=True)
        plt.title(title, fontsize=14, fontweight='bold')
        plt.xlabel("final_scores", fontsize=12)
        plt.ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å", fontsize=12)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(PLOT_FILE, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"üìà –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {PLOT_FILE}")
    
    def _create_roc_curve(self):
        """ROC-–∫—Ä–∏–≤–∞—è"""
        if not hasattr(self, 'y_test') or len(np.unique(self.y_test)) < 2:
            return
            
        fpr, tpr, _ = roc_curve(self.y_test, self.y_pred_proba)
        roc_auc = roc_auc_score(self.y_test, self.y_pred_proba)
        
        plt.figure(figsize=(10, 8))
        plt.plot(fpr, tpr, color='darkorange', lw=2, 
                label=f'ROC curve (AUC = {roc_auc:.3f})')
        plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', alpha=0.5)
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.05])
        plt.xlabel('False Positive Rate', fontsize=12)
        plt.ylabel('True Positive Rate', fontsize=12)
        plt.title('ROC Curve - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫', fontsize=14, fontweight='bold')
        plt.legend(loc="lower right", fontsize=11)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(ROC_FILE, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"üìâ ROC-–∫—Ä–∏–≤–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {ROC_FILE}")
    
    def _create_final_scores_distribution(self):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ final_scores —Å –ø–æ—Ä–æ–≥–æ–º"""
        plt.figure(figsize=(12, 8))
        
        threshold = self.report.get('model_metrics', {}).get('optimal_threshold', self.df['final_scores'].median())
        
        plt.hist(self.df['final_scores'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        plt.axvline(x=threshold, color='red', linestyle='--', linewidth=2, 
                   label=f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥: {threshold:.2f}')
        
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ final_scores —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º –ø–æ—Ä–æ–≥–æ–º", fontsize=14, fontweight='bold')
        plt.xlabel("final_scores", fontsize=12)
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫", fontsize=12)
        plt.legend(fontsize=11)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        dist_file = os.path.join(DEFAULT_OUT_MODEL, "final_scores_threshold.png")
        plt.savefig(dist_file, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {dist_file}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        final_report = {
            "analysis_date": datetime.now().isoformat(),
            "dataset_info": {
                "total_samples": len(self.df),
                "success_samples": int(self.df["success"].sum()),
                "success_rate": float(self.df["success"].mean()),
                "features_used": list(self.df.columns) if hasattr(self, 'df') else []
            },
            **self.report,
            "files_generated": {
                "model": MODEL_FILE,
                "report": REPORT_FILE,
                "success_rate_plot": PLOT_FILE,
                "histogram": HIST_FILE
            },
            "recommendations": self._generate_recommendations()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã
        if os.path.exists(ROC_FILE):
            final_report["files_generated"]["roc_curve"] = ROC_FILE
        
        with open(REPORT_FILE, "w", encoding="utf-8") as f:
            json.dump(final_report, f, ensure_ascii=False, indent=4)
        
        print(f"\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {REPORT_FILE}")
        return final_report
    
    def _generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        success_rate = self.df["success"].mean()
        threshold = self.report.get('model_metrics', {}).get('optimal_threshold', self.df['final_scores'].median())
        
        recommendations = []
        
        if success_rate == 1.0:
            recommendations.append("üéâ –í–°–ï –°–î–ï–õ–ö–ò –£–°–ü–ï–®–ù–´–ï! –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
            recommendations.append(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π final_scores: {self.df['final_scores'].min():.2f}")
            recommendations.append(f"üìà –°—Ä–µ–¥–Ω–∏–π final_scores: {self.df['final_scores'].mean():.2f}")
        elif success_rate == 0.0:
            recommendations.append("‚ùå –í–°–ï –°–î–ï–õ–ö–ò –ù–ï–£–°–ü–ï–®–ù–´–ï! –°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.")
            recommendations.append("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—Ö–æ–¥–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.")
        else:
            if success_rate > 0.7:
                recommendations.append("üìà –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. –°—Ç—Ä–∞—Ç–µ–≥–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞.")
            elif success_rate > 0.5:
                recommendations.append("üìä –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
            else:
                recommendations.append("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
            
            recommendations.append(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥ final_scores: {threshold:.2f}")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏.")
        
        return recommendations
    
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –¢–û–†–ì–û–í–´–• –°–î–ï–õ–û–ö")
        print("=" * 50)
        
        try:
            self.load_and_prepare_data()
            self.analyze_basic_statistics()
            self.train_model()
            self.create_visualizations()
            report = self.generate_report()
            
            print("\n" + "=" * 50)
            print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print("\nüìã –û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:")
            for rec in report["recommendations"]:
                print(f"   ‚Ä¢ {rec}")
                
            return report
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            raise

# === –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ ===
if __name__ == "__main__":
    analyzer = TradingModelAnalyzer(DEFAULT_DB, DEFAULT_TABLE)
    report = analyzer.run_full_analysis()