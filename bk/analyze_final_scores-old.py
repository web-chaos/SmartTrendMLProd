#!/usr/bin/env python3
import os
import sqlite3
import pandas as pd
import lightgbm as lgb
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import json

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DEFAULT_DB = "ml_trading.db"
DEFAULT_TABLE = "ml_trading_data"
DEFAULT_OUT_MODEL = "models/"
MODEL_FILE = os.path.join(DEFAULT_OUT_MODEL, "final_scores_lgbm.txt")
REPORT_FILE = os.path.join(DEFAULT_OUT_MODEL, "final_scores_report.json")
PLOT_FILE = os.path.join(DEFAULT_OUT_MODEL, "final_scores_success_rate.png")
HIST_FILE = os.path.join(DEFAULT_OUT_MODEL, "final_scores_histogram.png")

os.makedirs(DEFAULT_OUT_MODEL, exist_ok=True)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ===
conn = sqlite3.connect(DEFAULT_DB)

query = f"""
SELECT
    final_scores,
    scores_config,
    target,
    take1_profit,
    take2_profit,
    take3_profit,
    take4_profit,
    take5_profit,
    signal_passed
FROM {DEFAULT_TABLE}
WHERE signal_passed = 1 AND final_scores IS NOT NULL
"""
df = pd.read_sql_query(query, conn)
conn.close()

# === –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏ ===
df["success"] = (
    (df["target"] == 1)
    | (df["take1_profit"] > 0)
    | (df["take2_profit"] > 0)
    | (df["take3_profit"] > 0)
    | (df["take4_profit"] > 0)
    | (df["take5_profit"] > 0)
).astype(int)

df = df.dropna(subset=["final_scores", "scores_config"])

if df.empty:
    raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ signal_passed = 1 –∏ final_scores/scores_config")
if df["success"].sum() == 0:
    raise ValueError("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. –ü—Ä–æ–≤–µ—Ä—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞.")

# === –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
success_df = df[df["success"] == 1]
min_score = success_df["final_scores"].min()
max_score = success_df["final_scores"].max()
mean_score = success_df["final_scores"].mean()

print("üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ø–µ—à–Ω—ã–º —Å–¥–µ–ª–∫–∞–º:")
print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π final_scores: {min_score:.2f}")
print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π final_scores: {max_score:.2f}")
print(f"  –°—Ä–µ–¥–Ω–∏–π final_scores: {mean_score:.2f}")

# === –û–±—É—á–µ–Ω–∏–µ LightGBM ===
X = df[["final_scores", "scores_config"]]
y = df["success"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = lgb.LGBMClassifier(
    objective="binary",
    n_estimators=300,
    learning_rate=0.05,
    max_depth=5,
    num_leaves=31,
    random_state=42,
)
model.fit(X_train, y_train)
model.booster_.save_model(MODEL_FILE)

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞ ===
y_pred_proba = model.predict_proba(X_test)[:, 1]
results = X_test.copy()
results["prob_success"] = y_pred_proba
recommended_threshold = results.loc[results["prob_success"] > 0.5, "final_scores"].min()
if pd.isna(recommended_threshold):
    recommended_threshold = results["final_scores"].median()
print(f"\nüîÆ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥ final_scores: {recommended_threshold:.2f}")

# === –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö final_scores ===
plt.figure(figsize=(10,6))
plt.hist(df[df['success']==0]['final_scores'], bins=20, alpha=0.5, label='–ù–µ—É—Å–ø–µ—à–Ω—ã–µ', color='red')
plt.hist(df[df['success']==1]['final_scores'], bins=20, alpha=0.7, label='–£—Å–ø–µ—à–Ω—ã–µ', color='green')
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ final_scores –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫")
plt.xlabel("final_scores")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
plt.legend()
plt.tight_layout()
plt.savefig(HIST_FILE, dpi=150)
plt.show()
plt.close()
print(f"üìà –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {HIST_FILE}")

# === –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –±–∞–∫–µ—Ç–∞–º ===
df['bucket'] = pd.cut(df['final_scores'], bins=15)
success_rate = df.groupby('bucket')['success'].mean().fillna(0)

names = success_rate.index.astype(str)
values = success_rate.values

plt.figure(figsize=(10,6))
bars = plt.barh(names[::-1], values[::-1])
plt.title("üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º final_scores")
plt.xlabel("–î–æ–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
plt.ylabel("–î–∏–∞–ø–∞–∑–æ–Ω final_scores")
plt.axvline(x=0.5, color='red', linestyle='--', label="–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞ 0.5")
plt.legend(loc="lower right")
plt.tight_layout()
plt.savefig(PLOT_FILE, dpi=150)
plt.show()
plt.close()
print(f"üìà –ë–∞—Ä –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {PLOT_FILE}")

# === –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
feature_importance = {feature: float(imp) for feature, imp in zip(X.columns, model.feature_importances_)}

# === –û—Ç—á—ë—Ç ===
report = {
    "min_final_score": round(float(min_score), 4),
    "max_final_score": round(float(max_score), 4),
    "mean_final_score": round(float(mean_score), 4),
    "recommended_threshold": round(float(recommended_threshold), 4),
    "total_samples": len(df),
    "success_samples": int(df["success"].sum()),
    "feature_importance": feature_importance,
    "model_file": MODEL_FILE,
    "plot_file": PLOT_FILE,
    "hist_file": HIST_FILE
}

with open(REPORT_FILE, "w", encoding="utf-8") as f:
    json.dump(report, f, ensure_ascii=False, indent=4)

print(f"\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {REPORT_FILE}")
print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {MODEL_FILE}")