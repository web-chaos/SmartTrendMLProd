import asyncio
from datetime import datetime, time, timezone, timedelta
import pytz

print("[SESSION_MONITOR] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π")

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
TZ_KYIV = pytz.timezone("Europe/Kiev")
TZ_LONDON = pytz.timezone("Europe/London")
TZ_NY = pytz.timezone("America/New_York")
TZ_SYD = pytz.timezone("Australia/Sydney")
TZ_BRINKS = pytz.timezone("UTC")  # –∫–∞–∫ –∏ –æ–±—Å—É–∂–¥–∞–ª–∏ –≤—ã—à–µ

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ UTC (–≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ TradingView)
SESSIONS = [
    {"name": "–¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–∞—è (–°–∏–¥–Ω–µ–π)", "start": time(22, 0), "end": time(6, 0), "tz": TZ_SYD},
    {"name": "–ê–∑–∏–∞—Ç—Å–∫–∞—è (–¢–æ–∫–∏–æ)", "start": time(0, 0), "end": time(6, 0), "tz": pytz.timezone("Asia/Tokyo")},
    {"name": "–ê–∑–∏–∞—Ç—Å–∫–∞—è (–ì–æ–Ω–∫–æ–Ω–≥, –°–∏–Ω–≥–∞–ø—É—Ä)", "start": time(1, 30), "end": time(9, 0), "tz": pytz.timezone("Asia/Hong_Kong")},
    {"name": "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è (–õ–æ–Ω–¥–æ–Ω)", "start": time(8, 0), "end": time(16, 30), "tz": TZ_LONDON},
    {"name": "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è (–ù—å—é-–ô–æ—Ä–∫)", "start": time(13, 30), "end": time(20, 0), "tz": TZ_NY},
    # Brinks-—Å–µ—Å—Å–∏–∏
    {"name": "EU Brinks", "start": time(8, 0), "end": time(9, 0), "tz": TZ_BRINKS},
    {"name": "US Brinks", "start": time(14, 0), "end": time(15, 0), "tz": TZ_BRINKS},

]

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è now –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ start-end —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
def time_in_range(start: time, end: time, now: time) -> bool:
    if start <= end:
        return start <= now < end
    return now >= start or now < end  # –ß–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ UTC –≤ –ö–∏–µ–≤—Å–∫–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "HH:MM‚ÄìHH:MM –ø–æ –ö–∏–µ–≤—É"
def format_kyiv_range(start_utc: time, end_utc: time) -> str:
    today_utc = datetime.now(timezone.utc).date()
    dt_start_utc = datetime.combine(today_utc, start_utc, tzinfo=timezone.utc)
    dt_end_utc = datetime.combine(today_utc, end_utc, tzinfo=timezone.utc)
    if start_utc > end_utc:
        dt_end_utc += timedelta(days=1)  # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å

    dt_start_kyiv = dt_start_utc.astimezone(TZ_KYIV)
    dt_end_kyiv = dt_end_utc.astimezone(TZ_KYIV)

    return f"{dt_start_kyiv.strftime('%H:%M')}‚Äì{dt_end_kyiv.strftime('%H:%M')} –ø–æ –ö–∏–µ–≤—É"

def fetch_symbol_info(client):
    try:
        symbols = ["BTCUSDT", "ETHUSDT"]
        msg = ""
        for sym in symbols:
            ticker = client.futures_mark_price(symbol=sym)
            price = float(ticker["markPrice"])

            klines = client.futures_klines(symbol=sym, interval="1h", limit=1)
            vol = float(klines[0][5])

            vol_str = (f"{vol/1_000_000_000:.1f}B" if vol > 1_000_000_000 else
                       f"{vol/1_000_000:.1f}M" if vol > 1_000_000 else
                       f"{vol/1_000:.1f}K")
            msg += f"\nüìä {sym[:-4]}: ${price:,.0f} | –û–±—ä—ë–º (1—á): {vol_str}"
        return msg
    except Exception as e:
        print(f"[SESSION_MONITOR][FETCH][ERROR] {e}")
        return ""

async def session_monitor_loop(send_message, edit_message, pin_message, config, client):
    if not config.get("ENABLE_SESSION_MONITOR", True):
        print("[SESSION_MONITOR] –û—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥")
        return

    interval = config.get("SESSION_MONITOR_INTERVAL", 60)
    pin_enabled = config.get("SESSION_PIN_MESSAGE", True)
    show_symbols = config.get("SHOW_SESSION_SYMBOL_STATUS", True)

    session_state = {"last_active_names": set(), "message_id": None}

    while True:
        try:
            now_utc = datetime.now(timezone.utc).time()
            active_sessions = []

            for session in SESSIONS:
                if time_in_range(session["start"], session["end"], now_utc):
                    session_copy = session.copy()
                    session_copy["range"] = format_kyiv_range(session["start"], session["end"])
                    active_sessions.append(session_copy)

            # –ï—Å–ª–∏ —Å–æ—Å—Ç–∞–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_names = set(s["name"] for s in active_sessions)
            if current_names != session_state["last_active_names"]:
                session_state["last_active_names"] = current_names

                # if not active_sessions:
                #     msg = "‚ùå –°–µ–π—á–∞—Å –Ω–∏ –æ–¥–Ω–∞ –∫—Ä—É–ø–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
                # else:
                #     msg = ""
                #     for sess in active_sessions:
                #         msg += f"üïí <b>{sess['name']} —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è</b>\n‚è∞ {sess['range']}\n\n"

                #     msg += "üìç –°–ª–µ–¥–∏ –∑–∞ —Ä—ã–Ω–∫–æ–º –≤ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
                #     if show_symbols:
                #         msg += fetch_symbol_info(client)
                if not active_sessions:
                    msg = "‚ùå –°–µ–π—á–∞—Å –Ω–∏ –æ–¥–Ω–∞ –∫—Ä—É–ø–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
                else:
                    msg = ""
                    for sess in active_sessions:
                        # –û—Å–æ–±–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è Brinks
                        if sess["name"] == "EU Brinks":
                            msg += f"‚ö†Ô∏è <b>{sess['name']} ‚Äî –≤—Å–ø–ª–µ—Å–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)</b>\n‚è∞ {sess['range']}\n\n"
                        elif sess["name"] == "US Brinks":
                            msg += f"‚ö†Ô∏è <b>{sess['name']} ‚Äî —Ä–∞—Å—á—ë—Ç—ã –∏ –∫–ª–∏—Ä–∏–Ω–≥ (–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)</b>\n‚è∞ {sess['range']}\n\n"
                        else:
                            msg += f"üïí <b>{sess['name']} —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è</b>\n‚è∞ {sess['range']}\n\n"

                    msg += "üìç –°–ª–µ–¥–∏ –∑–∞ —Ä—ã–Ω–∫–æ–º –≤ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
                    if show_symbols:
                        msg += fetch_symbol_info(client)

                # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ë–õ–û–ö–ê –° –ö–û–®–ï–õ–¨–ö–ê–ú–ò ---
                if config.get("ENABLE_WALLETS", False):
                    wallets = config.get("WALLETS", {})
                    trc_wallet = wallets.get("USDT_TRC20")
                    ton_wallet_data = wallets.get("USDT_TON")

                    if trc_wallet and isinstance(ton_wallet_data, dict):
                        ton_address = ton_wallet_data.get("address")
                        ton_memo = ton_wallet_data.get("memo")

                        if ton_address and ton_memo:
                            msg += (
                                "\n\nüí≥ <b>–ö–æ—à–µ–ª—å–∫–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤:</b>\n"
                                f"USDT (TRC-20): <code>{trc_wallet}</code>\n"
                                f"USDT (TON): <code>{ton_address}</code>\n"
                                f"üîñ Memo: <code>{ton_memo}</code>\n"
                                "‚ùó <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å Memo –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ TON!</i>\n"
                                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
                            )


                if session_state["message_id"] and pin_enabled:
                    try:
                        await edit_message(msg, session_state["message_id"])
                    except Exception as e:
                        print(f"[SESSION_MONITOR][EDIT][ERROR] {e}")
                        new_id = await send_message(msg)
                        if pin_enabled:
                            await pin_message(new_id)
                        session_state["message_id"] = new_id
                else:
                    new_id = await send_message(msg)
                    if pin_enabled:
                        await pin_message(new_id)
                    session_state["message_id"] = new_id

        except Exception as e:
            print(f"[SESSION_MONITOR][ERROR] {e}")

        await asyncio.sleep(interval)