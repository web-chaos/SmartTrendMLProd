Поэтапный план разработки торгового функционала для бота (кратко, чётко, профессионально)

Ниже — последовательность этапов разработки с конкретными задачами, ожидаемыми артефактами и критериями готовности. В конфиг обязательно добавляем выбор типа маржи (CROSS / ISOLATED).

Этап 0 — Схема конфигурации (дизайн)

Задачи

Описать и добавить все ключи конфигурации.
Ключи (рекомендация)
TRADING_ENABLED (bool, default False)
DRY_RUN (bool, default True)
MAX_ACTIVE_TRADES (int)
POSITION_MODE = "percent" / "fixed"
POSITION_PERCENT (float)
POSITION_FIXED_USDT (float)
DEFAULT_LEVERAGE (int)
DEFAULT_MARGIN_TYPE = "CROSS" / "ISOLATED"
PER_SYMBOL_OVERRIDES (опционально)
Артефакт: файл конфигурации / schema doc.
Критерий готовности: все ключи описаны, в коде можно читать/менять значения (и через Telegram-команды).

Этап 1 — Базовый Binance wrapper + dry-run

Задачи

Реализовать обёртки: place_order, cancel_order, set_leverage, set_margin_type, get_balance, get_exchange_info.

Поддержка dry-run: при DRY_RUN=True не делать реальные вызовы, но логировать payload.

Обработка ошибок, retry (с лимитом) и rate-limit handling.
Артефакт: модуль binance_api.py с тестами-моками.
Критерий готовности: через мок-тесты видно корректные payloadы; при dry-run — нет вызовов в сеть.

Этап 2 — Позиционирование и расчёт лотов

Задачи

Функции расчёта размера позиции: по проценту и по фиксированной марже.

Функция округления по stepSize и minQty из exchangeInfo.

Учёт текущей цены, комиссий и выбранного плеча.
Артефакт: position_utils.py.
Критерий готовности: юнит-тесты для типичных символов (BTCUSDT, ETHUSDT) и краевых случаев (микроразмеры, шаги).

Этап 3 — Ограничение активных сделок и менеджер позиций

Задачи

Лимит по числу активных позиций (MAX_ACTIVE_TRADES).

Структура active_trades → персистентность в БД (sqlite или json) с полями: symbol, orderIds, size, entryPrice, stop, tps, marginType, leverage, state.

Синхронизация на старте: подтянуть открытые позиции через futures_position_information() и привести active_trades в консистентное состояние.
Артефакт: DB схема + sync routine.
Критерий готовности: при рестарте бот корректно синхронизирует позиции.

Этап 4 — Интеграция с логикой сигналов (execution flow)

Задачи

Встраивание вызовов открытия в pipeline сигналов: проверки TRADING_ENABLED, MAX_ACTIVE_TRADES, доступного баланса, маржинальности.

Перед открытием: set_margin_type, set_leverage, расчёт quantity, затем ордер(ы).

Логика отката на отказ (order rejected) и fallback (уменьшение размера).
Артефакт: обновлённый main.py — обработчик сигналов отправляет ордера.
Критерий готовности: в dry-run — сформированные ордеры видны в логах; при подключении к testnet — ордера создаются.

Этап 5 — Менеджмент сделки (TP/частичный TP/BE/трейлинг)

Задачи

Rules engine для правил: TP1 (частично), TP2, перенос стопа в BE при достижении порога, trailing stop.

Механизм выставления reduceOnly ордеров для частичных тейков и отдельный стоп-ордер.

Отслеживание частичных исполнений и корректировка оставшихся ордеров.
Артефакт: trade_manager.py с finite-state transitions.
Критерий готовности: смоделировать события (price ticks) → соответствующие ордера создаются/отменяются.

Этап 6 — Команды управления (Telegram / Web UI)

Задачи

Команды: /trade_on, /trade_off, /set_max_trades, /set_percent, /set_fixed, /set_leverage, /set_margin_type, /force_close <symbol>.

Отдельная команда для включения/выключения dry-run и для immediate manual override.
Артефакт: набор команд и help text.
Критерий готовности: команды принимают и подтверждают изменения; права доступа (телеграм id) настроены.

Этап 7 — Тестирование (unit / integration / testnet)

Задачи

Unit-тесты для утилит, мок-тесты для API-обёрток.

Интеграционные тесты на Binance Testnet: открытие, частичное исполнение, перенос стопа.

Chaos tests: симуляция сетевых ошибок, частичных филллов, rate-limit.
Артефакт: тест-сройства и отчёт.
Критерий готовности: тесты проходят локально + Testnet сценарии отрабатывают корректно.

Этап 8 — Операционное сопровождение и безопасность

Задачи

Secrets в env / Vault; не хранить ключи в коде.

Логирование всех транзакций + audit trail; резервные копии DB.

Healthcheck endpoint, auto-restart (systemd/docker-compose), метрики (пинг/uptime/activeTrades/PnL).

Fail-safe: глобальный circuit-breaker (если просадка X% за Y времени — авто-остановка торгов).
Артефакт: deploy doc, runbooks.
Критерий готовности: можно безопасно запустить на сервере, есть мониторинг и runbook.

Этап 9 — Пилотный запуск и итерации

Задачи

Запуск с DRY_RUN=False, но на Testnet или с минимальным капиталом.

Сбор метрик, логов, инцидентов → итеративные исправления и tuning параметров (размер позиции, стопы, trailing).
Критерий готовности: стабильная торговля по правилам, нет необработанных ошибок, показатели риска в пределах.

Риски + обязательные требования

Testnet первым — обязательно.

Rate limits — реализовать throttling.

Защита капитала — max leverage per-symbol, max exposure total, circuit-breaker.

Юридическое/регуляторное — убедиться, разрешена ли автоматизация в вашей юрисдикции и у брокера.